/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: NANOPLOT_RAW {
        publishDir = [
            path: { "${params.outdir}/nanoplot/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_TRIMMED {
        publishDir = [
            path: { "${params.outdir}/nanoplot/trimmed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_KRAKEN_TAXON_FILTERED {
        publishDir = [
            path: { "${params.outdir}/nanoplot/kraken_taxon_filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: CHOPPER {
        ext.args2 = "${params.chopper_args}"
    }

    withName: NONPAREIL_NONPAREIL {
        ext.args   = "-c"
        publishDir = [
            path: { "${params.outdir}/nonpareil" },
            mode: params.publish_dir_mode,
        ]
}

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_MAIN {
        ext.args = "${params.kraken_args}"
        publishDir = [
            path: { "${params.outdir}/kraken2/main" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_PROTEIN {
        ext.args = "${params.kraken_args}"
        publishDir = [
            path: { "${params.outdir}/kraken2/protein" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPADES {
        ext.args = "${params.spades_args}"
    }
    
    withName: FLYE {
        ext.args = "${params.flye_args}"
    }

    withName: BLAST_BLASTN {
        ext.args = "-evalue ${params.blast_evalue} -perc_identity ${params.blast_perc_identity} -max_target_seqs ${params.blast_target_seqs}"
        publishDir = [
            path: { "${params.outdir}/blast_blastn" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]  
    }

    withName: ALIGN_READS {
        ext.args = "${params.minimap2_args}"
    }

    withName: QUAST_MEDAKA {
        publishDir = [
            path: { "${params.outdir}/quast_medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UNZIP_POLISHED {
        publishDir = [
            path: { "${params.outdir}/unzip_polished" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_STATS {
        publishDir = [
            path: { "${params.outdir}/samtools/stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_DEPTH {
        publishDir = [
            path: { "${params.outdir}/samtools/depth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/samtools/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_COVERAGE {
        publishDir = [
            path: { "${params.outdir}/samtools/coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FASTQ_UNMAPPED {
        ext.args = "-n -f 4"
        publishDir = [
            path: { "${params.outdir}/samtools/unmapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BBMAP_REFORMAT_CLEAN_UNMAPPED {
        publishDir = [
            path: { "${params.outdir}/bbmap/unmapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGNMENT_CLASSIFY {
        publishDir = [
            path: { "${params.outdir}/alignment_classified" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_QUALITY_FILTER {
        ext.args = "-bq ${params.mapping_quality}"
        publishDir = [
            path: { "${params.outdir}/samtools/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FASTQ_MAPPED {
        ext.args = "-n"
        publishDir = [
            path: { "${params.outdir}/samtools/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BBMAP_REFORMAT_CLEAN_MAPPED {
        publishDir = [
            path: { "${params.outdir}/bbmap/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT_ALIGNMENT_TAXON_FILTERED {
        publishDir = [
            path: { "${params.outdir}/nanoplot/alignment_taxon_filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRONA_KRAKEN {
        publishDir = [
            path: { "${params.outdir}/krona/kraken" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKENTOOLS_KREPORT2KRONA {
        publishDir = [
            path: { "${params.outdir}/krakentools/kreport2krona" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKENTOOLS_EXTRACTKRAKENREADS {
        ext.args = "--fastq-output --include-children"
        publishDir = [
            path: { "${params.outdir}/krakentools/extractreads" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NONPAREIL_NONPAREIL {
        publishDir = [
            path: { "${params.outdir}/nonpareil/nonpareil" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NONPAREIL_CURVE {
        publishDir = [
            path: { "${params.outdir}/nonpareil/curve" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NONPAREIL_NONPAREILCURVESR {
        publishDir = [
            path: { "${params.outdir}/nonpareil/curvesr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CLASSIFIER_COMPARISON_GRAPH {
        publishDir = [
            path: { "${params.outdir}/classifier_comparison_metamaps-kraken" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN_ALIGNMENT_COMPARISON {
        publishDir = [
            path: { "${params.outdir}/classifier_comparison_alignment-kraken" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGNMENT_CLASSIFICATION_GRAPH {
        publishDir = [
            path: { "${params.outdir}/alignment-classification-graph" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}



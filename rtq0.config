/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Meta-ONT Nextflow custom config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

params {
    
    // Input and output options
    input                      = "assets/samplesheets/New-Mexico/2024-09_NM-rapid-pcr/samplesheet_barcode7-ZYMO_dorado.csv"
    outdir                     = 'results/New-Mexico/2024-09_NM-rapid-pcr/alignment_vs_kraken_zymo_2'

    //replace value with [true] to assemble reads with meta spades or meta flye
    meta_sample                = true

    // Designate which processes the workflow will execute
    skip_subsample                    = false
    skip_porechop                     = true   //should always be skipped unless reads have not been trimmed by dorado
    skip_metamaps                     = true
    skip_nonpareil                    = true
    skip_alignment_based_filtering    = false  //filters reads based on primary reference alignment
    skip_fastq_screen                 = true
    skip_kraken2                      = false
    skip_kraken2_parse_reads_by_taxon = true  //works the same as KrakenTools' extract_kraken_reads.py
    skip_kraken2_protein              = true  //uses kraken2 to perform a blastx-like translated search
    skip_filter_by_kraken2_protein    = true  //only keep reads that translate to a specific protein
    skip_assembly                     = true
    skip_medaka                       = true
    skip_binning                      = true
    skip_blast                        = true

    // BBmap subsampling params
    num_subsamples                    = 1000

    // porechop trimming is skipped by default - software is no longer maintained - recommend using adapter trimming function built into dorado

    // set read quality minimum threshold
    chopper_q                  = 20
    chopper_min_len            = 1000
    chopper_max_len            = 2147483647

    // MetaMaps params
    metamaps_db = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/metamaps/databases/refseq_complete"
    metamaps_threads = 16
    metamaps_mem = 120

    // Kraken2 params
    kraken_db_main = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/kraken-db/bact_arch_vir_fungi_amoeba-DB_41-mer"
    kraken_db_protein = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/kraken-db/protein_alanine_tRNA_ligase"
    kraken_custom_params = ""

    // tax-ids that a custom module uses to parse out reads by taxon from kraken classified reads 
    kraken_tax_ids = "5754 5763 1260114"

    // FastqScreen params
    fastq_screen_conf = "${projectDir}/assets/fastq_screen.conf"

    // Specify Assembler here: "flye", "megahit", "spades"
    assembler = 'flye'

    //Binning parameters
    bin_QC = "checkm"

    //CheckM2 parameters
    checkm2_db = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/checkm2/database/CheckM2_database/uniref100.KO.1.dmnd"

    // minimap2 params
    minimap2_meta = 'all-genomes'
    minimap2_index = '/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/minimap2/index/super-genome-refseq.mmi'
    minimap2_mismatch_penalty = 4
    seq2tax_map="/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/taxonomy/seqid2taxid.map"
    my_tax_ids = "${projectDir}/assets/tax_ids_acanth-verm-naegleria.txt"
    include_children = true
    mapping_quality = 60
    strain_2_species = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/taxonomy/strainId2speciesId.map"

    // QUAST params
    quast_ref = '/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/reference/bacteria_refseq.fna'

    // BLAST params
    blast_db = "/scicomp/groups-pure/OID/NCEZID/DFWED/WDPB/EMEL/Projects/Long_Read_Analysis_RUSHER/data/blast/arch-bact-fung-hum-amoeba_refseq/arch-bact-fung-hum-amoeba_refseq"

    //BLAST custom params
    blast_evalue = "1e-10"
    blast_perc_identity = "95"
    blast_target_seqs = "5"    

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '300.GB'
    max_cpus                   = 20
    max_time                   = '300.h'

}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    local {
        executor {
        name = 'local'
        queueSize = 6
        }
        process {
        executor = 'local'
        memory = '32.GB'
        cpus = 12
        time = '48.h'
        }
    }
    rosalind {
        executor {
        name = 'sge'
        queueSize = 12
        pollInterval = '10sec'
        submitRateLimit = '2sec'
        }
        process {
        // Executor information
        executor = 'sge'
        //jobName = { "$task.name - $task.hash" }
        penv = 'smp'
        queue = { task.time <= 4.h ? 'short.q' : task.time > 7.day ? 'long.q' : 'all.q' }

        // Disable docker by default
        docker.enabled = false

        // Default resources - expected to be overwritten
        memory = '32.GB'
        cpus = 12
        time = '72.h'

        // Set h_vmem option for qsub submissions. +20 memory to h_vmem prevents memory allocation errors.
        clusterOptions = { "-l h_vmem=${(check_max((task.memory.toGiga())+20), 'memory').toString().replaceAll(/[\sB]/,'')}G" }

        // Error handling - increases resources on each retry. Try to ignore errors and continue if not in errors listed.
        errorStrategy = { task.exitStatus in [143,137,104,134,139,140,71,255] ? 'retry' : 'ignore' }
        maxRetries    = 3
        maxErrors     = '-1'
        }
    }
}
